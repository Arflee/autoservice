generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model administrator {
  id_admin   Int    @default(autoincrement())
  id_osoba   Int    @unique(map: "u_fk_administrator_osoba")
  heslo_hash String @db.VarChar(256)
  osoba      osoba  @relation(fields: [id_osoba], references: [id_osoba], onDelete: Cascade, onUpdate: NoAction, map: "fk_administrator_osoba")

  @@id([id_admin, id_osoba], map: "pk_administrator")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model mechanik {
  id_mechanik Int         @default(autoincrement())
  id_osoba    Int         @unique(map: "u_fk_mechanik_osoba")
  heslo_hash  String      @db.VarChar(256)
  osoba       osoba       @relation(fields: [id_osoba], references: [id_osoba], onDelete: Cascade, onUpdate: NoAction, map: "fk_mechanik_osoba")
  rezervace   rezervace[]

  @@id([id_mechanik, id_osoba], map: "pk_mechanik")
}

model osoba {
  id_osoba      Int            @id(map: "pk_osoba") @default(autoincrement())
  tel           String         @db.VarChar(15)
  jmeno         String         @db.VarChar(40)
  prijmeni      String         @db.VarChar(40)
  email         String         @db.VarChar(100)
  administrator administrator?
  mechanik      mechanik?
  vozidlo       vozidlo[]
}

model rezervace {
  id_rezervace      Int       @default(autoincrement())
  id_sluzba         Int
  id_vozidlo        Int
  id_osoba          Int
  id_mechanik       Int?
  mechanik_id_osoba Int?
  datum             String    @db.VarChar(256)
  cas               String    @db.VarChar(256)
  mechanik          mechanik? @relation(fields: [id_mechanik, mechanik_id_osoba], references: [id_mechanik, id_osoba], onDelete: Cascade, onUpdate: NoAction, map: "fk_rezervace_mechanik")
  sluzba            sluzba    @relation(fields: [id_sluzba], references: [id_sluzba], onDelete: Cascade, onUpdate: NoAction, map: "fk_rezervace_sluzba")
  vozidlo           vozidlo   @relation(fields: [id_vozidlo, id_osoba], references: [id_vozidlo, id_osoba], onDelete: Cascade, onUpdate: NoAction, map: "fk_rezervace_vozidlo")

  @@id([id_rezervace, id_sluzba, id_vozidlo, id_osoba], map: "pk_rezervace")
}

model sluzba {
  id_sluzba Int         @id(map: "pk_sluzba") @default(autoincrement())
  nazev     String      @db.VarChar(100)
  cena      Int
  popis     String      @db.VarChar(255)
  rezervace rezervace[]
}

model vozidlo {
  id_vozidlo Int         @default(autoincrement())
  id_osoba   Int
  model      String      @db.VarChar(100)
  reg_znacka String      @db.VarChar(32)
  rezervace  rezervace[]
  osoba      osoba       @relation(fields: [id_osoba], references: [id_osoba], onDelete: Cascade, onUpdate: NoAction, map: "fk_vozidlo_osoba")

  @@id([id_vozidlo, id_osoba], map: "pk_vozidlo")
}
